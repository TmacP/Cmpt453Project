require "main.Print"


local debug = true
local debug_connect = true
local debug_apple = false
local debug_movement = false
local debug_update = true

local socket = require("socket")

local function put_food(self)
	-- Send a message to the server indicating the apple has been eaten
	local message = "apple"
	self.udp:send(message)
	Print(debug_apple, "Message sent to server:", message)

	-- Receive the new food position from the server
	local response, err = self.udp:receive()
	if response then
		Print(debug_apple, "Received from server:", response)

		-- Parse the response and extract the new food coordinates
		local x, y = response:match("x=(%d+),y=(%d+)")
		-- Print the parsed coordinates
		Print(debug_apple, "Parsed coordinates - x:", x, "y:", y)
		self.food = {x = tonumber(x), y = tonumber(y)}
		Print(debug_apple, "Food coordinates:", self.food.x, "y:", self.food.y)

		-- Move the apple game object to the new position
		print("Setting apple position to:", self.food.x, self.food.y)

		-- Optionally, update the tilemap if you need to reflect it visually
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
	else
		Print(debug_apple, "Error receiving response:", err)
	end
end


function reset_tilemap(self)
	-- Loop through the grid and reset all tiles to empty (tile 1)
	for x = 2, 47 do  -- Adjust based on your grid size
		for y = 2, 47 do
			tilemap.set_tile("#grid", "layer1", x, y, 1)  -- Reset all tiles to 1 (empty)
		end
	end

	-- Redraw the apple if it exists
	if self.food then
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
	end
end


function init(self)
	-- Create a UDP socket
	self.udp = assert(socket.udp())
	-- Set the server address and port
	local server_ip = "0.0.0.0"--"206.51.242.248"  -- Update to your Fly.io server IP
	local server_port = 12345          -- Update to your Fly.io server port
	-- Connect to the server
	self.udp:setpeername(server_ip, server_port)
	-- Set a timeout for receiving data (in seconds)
	self.udp:settimeout(0.1)

	local message = "Connect"
	self.udp:send(message)
	Print(debug_connect, "Message sent to server:", message)
	-- Receive the echoed message from the server
	local response, err = self.udp:receive()
	if response then
		Print(debug_connect, "Received from server:", response, "\n")
		local x, y = response:match("x=(%d+),y=(%d+)")
		self.food = {x = tonumber(x), y = tonumber(y)}
		put_food(self)
	else
		Print(debug_connect, "Error receiving response:", err)
	end

	-- Get input
	msg.post(".", "acquire_input_focus")

	-- Initialize the snake's segments to the starting size of 4
	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24}
	}
	self.dir = {x = 1, y = 0}
	self.dirqueue = {}
	self.speed = 7.0
	self.alive = true
	self.t = 0

	math.randomseed(socket.gettime())
	--put_food(self)
end

function update(self, dt)
	if not self.alive then
		-- Reset the tilemap to remove old snake body and food
		reset_tilemap(self)

		-- Reset snake to the initial size and position when alive is false
		self.segments = {
			{x = 7, y = 24},
			{x = 8, y = 24},
			{x = 9, y = 24},
			{x = 10, y = 24}
		}
		self.dir = {x = 1, y = 0}  -- Set the starting direction
		self.speed = 7.0  -- Reset speed (optional)
		self.alive = true  -- Set alive back to true to resume playing
		self.t = 0  -- Reset timer

		-- Optionally, place the food again (since it was cleared during the reset)
		return  -- Skip the rest of the update loop and return to start fresh
	end

	self.t = self.t + dt
	if self.t >= 1.0 / self.speed then
		local newdir = table.remove(self.dirqueue, 1)

		if newdir then
			local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
			if not opposite then
				self.dir = newdir
			end
		end

		local head = self.segments[#self.segments]
		local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

		table.insert(self.segments, newhead)

		local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)

		-- Handle collision with walls (tile 4)
		if tile == 2 or tile == 4 then
			-- Set alive to false so the snake will reset in the next frame
			self.alive = false
		elseif tile == 3 then  -- Apple tile
			self.speed = self.speed + 1
			put_food(self)  -- Send "apple" message to server when the apple is eaten
		else
			local tail = table.remove(self.segments, 1)
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
		end

		-- Update the grid with the new snake segments
		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
		end


		-- Attempt to receive from the server without blocking
		local response, err = self.udp:receive()
		if response then
			-- Handle the server response (for example, updating food position)
			local x, y = response:match("x=(%d+),y=(%d+)")
			if x and y then
				-- If food has moved, update the old food position to tile 1 (empty)
				if self.food then
					tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 1)
				end
				-- Update the food position
				self.food = {x = tonumber(x), y = tonumber(y)}
				tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
			end
			Print(debug_update, "Received from server:", response)
		elseif err ~= "timeout" then
			-- If there is an error other than timeout, print it
			Print(debug_update, "Error receiving response:", err)
		end

		-- Allow a short sleep to prevent the socket from blocking the game loop
		socket.sleep(0.001)  -- Sleep for 50ms, adjust based on the desired responsiveness

		-- Reset timer
		self.t = 0
	end
end


function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = 1})

		-- communicate to server
		local message = "up"
		self.udp:send(message)
		Print(debug_movement, "Message sent to server:", message)
		-- Receive the echoed message from the server
		local response, err = self.udp:receive()
		if response then
			Print(debug_movement, "Received from server:", response)
		else
			Print(debug_movement, "Error receiving response:", err)
		end

	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = -1})

		-- communicate to server
		local message = "down"
		self.udp:send(message)
		Print(debug_movement, "Message sent to server:", message)
		-- Receive the echoed message from the server
		local response, err = self.udp:receive()
		if response then
			Print(debug_movement, "Received from server:", response)
		else
			Print(debug_movement, "Error receiving response:", err)
		end

	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirqueue, {x = -1, y = 0})

		-- communicate to server
		local message = "left"
		self.udp:send(message)
		Print(debug_movement, "Message sent to server:", message)
		-- Receive the echoed message from the server
		local response, err = self.udp:receive()
		if response then
			Print(debug_movement, "Received from server:", response)
		else
			Print(debug_movement, "Error receiving response:", err)
		end

	elseif action_id == hash("right") and action.pressed then
		table.insert(self.dirqueue, {x = 1, y = 0})

		-- communicate to server
		local message = "right"
		self.udp:send(message)
		Print(debug_movement, "Message sent to server:", message)
		-- Receive the echoed message from the server
		local response, err = self.udp:receive()
		if response then
			Print(debug_movement, "Received from server:", response)
		else
			Print(debug_movement, "Error receiving response:", err)
		end
	end
end
