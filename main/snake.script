local socket = require("socket")

local function put_food(self)
	self.food = {x = math.random(2, 47), y = math.random(2, 47)}
	tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)        
end

function init(self)
	
	-- Create a UDP socket
	self.udp = assert(socket.udp())
	-- Set the server address and port
	local server_ip = "206.51.242.248"  -- Update to your Fly.io server IP
	local server_port = 12345          -- Update to your Fly.io server port
	-- Connect to the server
	self.udp:setpeername(server_ip, server_port)
	-- Set a timeout for receiving data (in seconds)
	self.udp:settimeout(2)



	local message = "Connect"
	self.udp:send(message)
	print("Message sent to server:", message)
	-- Receive the echoed message from the server
	local response, err = self.udp:receive()
	if response then
		print("Received from server:", response)
	else
		print("Error receiving response:", err)
	end
	
	-- get input
	msg.post(".", "acquire_input_focus")

	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24} }
		self.dir = {x = 1, y = 0}
		self.dirqueue = {}
		self.speed = 7.0
		self.alive = true
		self.t = 0

		math.randomseed(socket.gettime())
		put_food(self)
	end

	function update(self, dt)
		self.t = self.t + dt
		if self.t >= 1.0 / self.speed and self.alive then
			local newdir = table.remove(self.dirqueue, 1)

			if newdir then
				local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
				if not opposite then
					self.dir = newdir
				end
			end

			local head = self.segments[#self.segments]
			local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

			table.insert(self.segments, newhead)

			local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)

			if tile == 2 or tile == 4 then
				self.alive = false
			elseif tile == 3 then
				self.speed = self.speed + 1
				put_food(self)
			else
				local tail = table.remove(self.segments, 1)
				tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
			end

			for i, s in ipairs(self.segments) do
				tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)            
			end

			self.t = 0
		end
	end

	function on_input(self, action_id, action)
		if action_id == hash("up") and action.pressed then
			table.insert(self.dirqueue, {x = 0, y = 1})

			-- communicate to server
			local message = "up"
			self.udp:send(message)
			print("Message sent to server:", message)
			-- Receive the echoed message from the server
			local response, err = self.udp:receive()
			if response then
				print("Received from server:", response)
			else
				print("Error receiving response:", err)
			end

		elseif action_id == hash("down") and action.pressed then
			table.insert(self.dirqueue, {x = 0, y = -1})

			-- communicate to server
			local message = "down"
			self.udp:send(message)
			print("Message sent to server:", message)
			-- Receive the echoed message from the server
			local response, err = self.udp:receive()
			if response then
				print("Received from server:", response)
			else
				print("Error receiving response:", err)
			end    

		elseif action_id == hash("left") and action.pressed then
			table.insert(self.dirqueue, {x = -1, y = 0})

			-- communicate to server
			local message = "left"
			self.udp:send(message)
			print("Message sent to server:", message)
			-- Receive the echoed message from the server
			local response, err = self.udp:receive()
			if response then
				print("Received from server:", response)
			else
				print("Error receiving response:", err)
			end        

		elseif action_id == hash("right") and action.pressed then
			table.insert(self.dirqueue, {x = 1, y = 0})

			-- communicate to server
			local message = "right"
			self.udp:send(message)
			print("Message sent to server:", message)
			-- Receive the echoed message from the server
			local response, err = self.udp:receive()
			if response then
				print("Received from server:", response)
			else
				print("Error receiving response:", err)
			end

		elseif action_id == hash("space") and action.pressed then
			-- communicate to server
			local message = "debug"
			self.udp:send(message)
			print("Message sent to server:", message)
			-- Receive the echoed message from the server
			local response, err = self.udp:receive()
			if response then
				print("Received from server:", response)
			else
				print("Error receiving response:", err)
			end
		end
	end