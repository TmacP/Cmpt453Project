local socket = require("socket")
local host, port = "127.0.0.1", 12345

local tcp = nil
local koi_id = tostring(math.random(1000, 9999)) -- Unique ID for this koi
local koi_positions = {} -- To store all koi positions

local SCREEN_MIN_X = 0
local SCREEN_MAX_X = 360
local SCREEN_MIN_Y = 0
local SCREEN_MAX_Y = 640

function connect_to_server()
	tcp = assert(socket.tcp())
	tcp:connect(host, port)
	tcp:settimeout(0)
	print("Connected to server")
end

function send_koi_position(self)
	if tcp then
		local x, y = self.position.x, self.position.y
		local data = string.format("%s:%f,%f\n", koi_id, x, y)
		tcp:send(data)
	end
end

function receive_koi_positions(self)
	if tcp then
		local data, status, partial = tcp:receive()
		if data or partial then
			koi_positions = {} -- Clear previous positions
			local response = data or partial

			for line in response:gmatch("[^\n]+") do
				local id, pos = line:match("([^:]+):([^:]+)")
				if id and pos then
					local x, y = pos:match("([^,]+),([^,]+)")
					if x and y then
						koi_positions[id] = vmath.vector3(tonumber(x), tonumber(y), 0)
					end
				end
			end
		end
	end
end

function init(self)
	self.position = go.get_position()
	self.speed = vmath.vector3(100, 80, 0) -- Speed in x and y directions
	connect_to_server()
end

function update(self, dt)
	-- Simulate koi movement
	self.position = self.position + self.speed * dt

	-- Screen boundary checks
	if self.position.x < SCREEN_MIN_X or self.position.x > SCREEN_MAX_X then
		self.speed.x = -self.speed.x
		self.position.x = math.max(SCREEN_MIN_X, math.min(SCREEN_MAX_X, self.position.x))
	end

	if self.position.y < SCREEN_MIN_Y or self.position.y > SCREEN_MAX_Y then
		self.speed.y = -self.speed.y
		self.position.y = math.max(SCREEN_MIN_Y, math.min(SCREEN_MAX_Y, self.position.y))
	end

	go.set_position(self.position)

	-- Send position to server
	send_koi_position(self)

	-- Receive positions of all koi from server
	receive_koi_positions(self)
end

function on_message(self, message_id, message, sender)
	-- Draw all koi
	for id, pos in pairs(koi_positions) do
		if id ~= koi_id then -- Skip self
			msg.post("@render:", "draw_debug_line", { start_point = pos, end_point = pos + vmath.vector3(10, 10, 0), color = vmath.vector4(0, 1, 0, 1) })
		end
	end
end
